/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.yu.surprise;

public final class R {
    public static final class anim {
        public static final int loading_animation=0x7f040000;
    }
    public static final class animator {
        public static final int fade_in=0x7f050000;
        public static final int fade_out=0x7f050001;
        public static final int fragment_close_enter=0x7f050002;
        public static final int fragment_close_exit=0x7f050003;
        public static final int fragment_fade_enter=0x7f050004;
        public static final int fragment_fade_exit=0x7f050005;
        public static final int fragment_open_enter=0x7f050006;
        public static final int fragment_open_exit=0x7f050007;
    }
    public static final class array {
        /**  Array of output values for button backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays 
         */
        public static final int config_autoBrightnessButtonBacklightValues=0x7f090018;
        /**  Array of output values for keyboard backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays 
         */
        public static final int config_autoBrightnessKeyboardBacklightValues=0x7f090019;
        /**  Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays 
         */
        public static final int config_autoBrightnessLcdBacklightValues=0x7f090017;
        /**  Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 control points as follows:
         (1-based arrays)

         Point 1:            (0, value[1]):             lux <= 0
         Point 2:     (level[1], value[2]):  0        < lux <= level[1]
         Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
         ...
         Point N+1: (level[N], value[N+1]):  level[N] < lux

         The control points must be strictly increasing.  Each control point
         corresponds to an entry in the brightness backlight values arrays.
         For example, if LUX == level[1] (first element of the levels array)
         then the brightness will be determined by value[2] (second element
         of the brightness values array).

         Spline interpolation is used to determine the auto-brightness
         backlight values for LUX levels between these control points.

         Must be overridden in platform specific overlays 
         */
        public static final int config_autoBrightnessLevels=0x7f090016;
        /**  If the DUN connection for this CDMA device supports more than just DUN 
 traffic you should list them here. 
 If this device is not CDMA this is ignored.  If this list is empty on 
 a DUN-requiring CDMA device, the DUN APN will just support just DUN. 
         */
        public static final int config_cdma_dun_supported_types=0x7f09000d;
        /**  Set of NetworkInfo.getType() that reflect data usage. 
 TYPE_MOBILE_CBS 
         */
        public static final int config_data_usage_network_types=0x7f090005;
        /**  Vibrator pattern to be used as the default for notifications
         that specify DEFAULT_VIBRATE.
     
         */
        public static final int config_defaultNotificationVibePattern=0x7f09001f;
        /**  Vibrator pattern for a very short but reliable vibration for soft keyboard tap 
         */
        public static final int config_keyboardTapVibePattern=0x7f090012;
        /**  Package name(s) containing location provider support.
         These packages can contain services implementing location providers,
         such as the Geocode Provider, Network Location Provider, and
         Fused Location Provider. They will each be searched for
         service components implementing these providers.
         It is strongly recommended that the packages explicitly named
         below are on the system image, so that they will not map to
         a 3rd party application.
         The location framework also has support for installation
         of new location providers at run-time. The new package does not
         have to be explicitly listed here, however it must have a signature
         that matches the signature of at least one package on this list.
         
         */
        public static final int config_locationProviderPackageNames=0x7f09001a;
        /**  Vibrator pattern for feedback about a long screen/key press 
         */
        public static final int config_longPressVibePattern=0x7f090010;
        /**  Array of integer pairs controlling the rate at which the master volume changes
         in response to volume up and down key events.
         The first integer of each pair is compared against the current master volume
         (in range 0 to 100).
         The last pair with first integer <= the current volume is chosen,
         and the second integer of the pair indicates the amount to increase the master volume
         when volume up is pressed. 
 default: always increase volume by 5% 
         */
        public static final int config_masterVolumeRamp=0x7f090001;
        /**  If the mobile hotspot feature requires provisioning, a package name and class name
        can be provided to launch a supported application that provisions the devices.

        Example Usage:

        String[] appDetails = getStringArray(R.array.config_mobile_hotspot_provision_app);
        Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.setClassName(appDetails[0], appDetails[1]);
        startActivityForResult(intent, 0);

        public void onActivityResult(int requestCode, int resultCode, Intent intent) {
            super.onActivityResult(requestCode, resultCode, intent);
            if (requestCode == 0) {
                if (resultCode == Activity.RESULT_OK) {
                    //Mobile hotspot provisioning successful
                } else {
                    //Mobile hotspot provisioning failed
                }
            }

        See src/com/android/settings/TetherSettings.java for more details.
        
 The first element is the package name and the second element is the class name
         of the provisioning app 

        <item>com.example.provisioning</item>
        <item>com.example.provisioning.Activity</item>
    
         */
        public static final int config_mobile_hotspot_provision_app=0x7f09000b;
        /**  Vibrator pattern to be used as the default for notifications
         that do not specify vibration but vibrate anyway because the device
         is in vibrate mode.
     
         */
        public static final int config_notificationFallbackVibePattern=0x7f090020;
        /**  Array of OEM specific USB mode override config.
         OEM can override a certain USB mode depending on ro.bootmode.
         Specify an array of below items to set override rule.
         [bootmode]:[original USB mode]:[USB mode used]
         */
        public static final int config_oemUsbModeOverride=0x7f09001e;
        /**  Array of ConnectivityManager.TYPE_xxxx constants for networks that may only
         be controlled by systemOrSignature apps.  
         */
        public static final int config_protectedNetworks=0x7f090003;
        /**  Vibrator pattern for feedback about booting with safe mode disabled 
         */
        public static final int config_safeModeDisabledVibePattern=0x7f090013;
        /**  Vibrator pattern for feedback about booting with safe mode disabled 
         */
        public static final int config_safeModeEnabledVibePattern=0x7f090014;
        /**  Vibrator pattern for feedback about hitting a scroll barrier 
         */
        public static final int config_scrollBarrierVibePattern=0x7f090015;
        /**  List of paths to serial ports that are available to the serial manager.
         for example, /dev/ttyUSB0
    
         */
        public static final int config_serialPorts=0x7f09000f;
        /**  National language locking shift tables to enable for SMS encoding.
         Decoding is always enabled. 3GPP TS 23.038 states that this feature
         should not be enabled until a formal request is issued by the relevant
         national regulatory body. Array elements are codes from the table above.
         Example 1: devices sold in Turkey must include table 1 after the
           Turkish Telecommunication Authority requires locking shift encoding
           to be enabled (est. July 2012). (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
           See also: http://www.mobitech.com.tr/tr/ersanozturkblog_en/index.php?entry=entry090223-160014
         Example 2: devices sold in India should include tables 4 through 13
         to enable use of the new Release 9 tables for Indic languages. 
         */
        public static final int config_sms_enabled_locking_shift_tables=0x7f09001d;
        /**  National Language Identifier codes for the following two config items.
         (from 3GPP TS 23.038 V9.1.1 Table 6.2.1.2.4.1):
          0  - reserved
          1  - Turkish
          2  - Spanish (single shift table only)
          3  - Portuguese
          4  - Bengali
          5  - Gujarati
          6  - Hindi
          7  - Kannada
          8  - Malayalam
          9  - Oriya
         10  - Punjabi
         11  - Tamil
         12  - Telugu
         13  - Urdu
         14+ - reserved 
 National language single shift tables to enable for SMS encoding.
         Decoding is always enabled. 3GPP TS 23.038 states that this feature
         should not be enabled until a formal request is issued by the relevant
         national regulatory body. Array elements are codes from the table above.
         Example 1: devices sold in Turkey must include table 1 to conform with
           By-Law Number 27230. (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
         Example 2: devices sold in India should include tables 4 through 13
           to enable use of the new Release 9 tables for Indic languages. 
         */
        public static final int config_sms_enabled_single_shift_tables=0x7f09001c;
        /**  Do not translate. Defines the slots for the right-hand side icons.  That is to say, the
         icons in the status bar that are not notifications. 
         */
        public static final int config_statusBarIcons=0x7f090000;
        /**  List of regexpressions describing the interface (if any) that represent tetherable
         bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
         should be empty. 
         */
        public static final int config_tether_bluetooth_regexs=0x7f090009;
        /**  Dhcp range (min, max) to use for tethering purposes 
         */
        public static final int config_tether_dhcp_range=0x7f09000a;
        /**  Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
         */
        public static final int config_tether_upstream_types=0x7f09000c;
        /**  List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" 
         */
        public static final int config_tether_usb_regexs=0x7f090006;
        /**  List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" 
         */
        public static final int config_tether_wifi_regexs=0x7f090007;
        /**  List of regexpressions describing the interface (if any) that represent tetherable
         WiMAX interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" 
         */
        public static final int config_tether_wimax_regexs=0x7f090008;
        /**  Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD 
         */
        public static final int config_twoDigitNumberPattern=0x7f09001b;
        /**  List of file paths for USB host busses to exclude from USB host support.
         For example, if the first USB bus on the device is used to communicate
         with the modem or some other restricted hardware, add "/dev/bus/usb/001/"
         to this list.  If this is empty, no parts of the host USB bus will be excluded.
    
         */
        public static final int config_usbHostBlacklist=0x7f09000e;
        /**  Vibrator pattern for feedback about touching a virtual key 
         */
        public static final int config_virtualKeyVibePattern=0x7f090011;
        /**  XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
         Please don't copy them, copy anything else. 
 This string array should be overridden by the device to present a list of network
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware 
 An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx],
         [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]  
 the 5th element "resore-time" indicates the number of milliseconds to delay
         before automatically restore the default connection.  Set -1 if the connection
         does not require auto-restore. 
 the 6th element indicates boot-time dependency-met value. 
         */
        public static final int networkAttributes=0x7f090002;
        /**  This string array should be overridden by the device to present a list of radio
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware 
 An Array of "[ConnectivityManager connectionType],
                      [# simultaneous connection types]"  
         */
        public static final int radioAttributes=0x7f090004;
    }
    public static final class attr {
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int heartColor=0x7f01000c;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int numberProgressBarStyle=0x7f01000b;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_current=0x7f010001;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_max=0x7f010002;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_reached_bar_height=0x7f010005;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_reached_color=0x7f010004;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_text_color=0x7f010008;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_text_offset=0x7f010009;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_text_size=0x7f010007;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>visible</code></td><td>0</td><td></td></tr>
<tr><td><code>invisible</code></td><td>1</td><td></td></tr>
</table>
         */
        public static final int progress_text_visibility=0x7f01000a;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_unreached_bar_height=0x7f010006;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int progress_unreached_color=0x7f010003;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int viewColor=0x7f010000;
    }
    public static final class bool {
        /**  Default value used to block data calls if ims is not
         connected.  If you use the ims apn DCT will block
         any other apn from connecting until ims apn is connected
         */
        public static final int ImsConnectedDefaultValue=0x7f0a0001;
        /**  Whether action menu items should be displayed in ALLCAPS or not.
         Defaults to true. If this is not appropriate for specific locales
         it should be disabled in that locale's resources. 
         */
        public static final int config_actionMenuItemAllCaps=0x7f0a002f;
        /**  Whether action menu items should obey the "withText" showAsAction
         flag. This may be set to false for situations where space is
         extremely limited. 
         */
        public static final int config_allowActionMenuItemTextWithIcon=0x7f0a0030;
        /**  If true, the screen can be rotated via the accelerometer in all 4
         rotations as the default behavior. 
         */
        public static final int config_allowAllRotations=0x7f0a0010;
        /**  Set to true if the RSSI should always display CDMA signal strength even on EVDO 
         */
        public static final int config_alwaysUseCdmaRssi=0x7f0a002c;
        /**  If this is true, the screen will fade off. 
         */
        public static final int config_animateScreenLights=0x7f0a000e;
        /**  Don't name config resources like this.  It should look like config_annoyDianne 
         */
        public static final int config_annoy_dianne=0x7f0a000c;
        /**  Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set 
         */
        public static final int config_automatic_brightness_available=0x7f0a000b;
        /**  Indicate whether the SD card is accessible without removing the battery. 
         */
        public static final int config_batterySdCardAccessibility=0x7f0a0015;
        /**  Boolean indicating if current platform need do one-time bluetooth address
         re-validation 
         */
        public static final int config_bluetooth_address_validation=0x7f0a0021;
        /**  Enable/disable default bluetooth profiles:
        HSP_AG, ObexObjectPush, Audio, NAP 
         */
        public static final int config_bluetooth_default_profiles=0x7f0a0024;
        /**  Boolean indicating if current platform supports bluetooth SCO for off call
    use cases 
         */
        public static final int config_bluetooth_sco_off_call=0x7f0a001f;
        /**  Boolean indicating if current platform supports bluetooth wide band
         speech 
         */
        public static final int config_bluetooth_wide_band_speech=0x7f0a0020;
        /**  Enables built-in SIP phone capability 
         */
        public static final int config_built_in_sip_phone=0x7f0a0026;
        /**  Whether camera shutter sound is forced or not  (country specific). 
         */
        public static final int config_camera_sound_forced=0x7f0a003c;
        /**  Control whether being in the car dock should enable accelerometer based
         screen orientation.  This defaults to true because putting a device in
         a car dock make the accelerometer more a physical input (like a lid). 
         */
        public static final int config_carDockEnablesAccelerometer=0x7f0a0013;
        /**  Set to true to add links to Cell Broadcast app from Settings and MMS app. 
         */
        public static final int config_cellBroadcastAppLinks=0x7f0a0036;
        /**  Whether dialogs should close automatically when the user touches outside
         of them.  This should not normally be modified. 
         */
        public static final int config_closeDialogWhenTouchOutside=0x7f0a0007;
        /**  Control whether being in the desk dock should enable accelerometer
         based screen orientation.  This defaults to true because it is
         common for desk docks to be sold in a variety of form factors
         with different orientations.  Since we cannot always tell these docks
         apart and the docks cannot report their true orientation on their own,
         we rely on gravity to determine the effective orientation. 
         */
        public static final int config_deskDockEnablesAccelerometer=0x7f0a0012;
        /**  Allow the menu hard key to be disabled in LockScreen on some devices 
         */
        public static final int config_disableMenuKeyInLockScreen=0x7f0a0018;
        /**  Set to true if we need to not prefer an APN.
         This is being added to enable a simple scenario of pre-paid
         provisioning on some carriers, working around a bug (7305641)
         where if the preferred is used we don't try the others. 
         */
        public static final int config_dontPreferApn=0x7f0a003d;
        /**  If supported and enabled, are dreams activated when docked? (by default) 
         */
        public static final int config_dreamsActivatedOnDockByDefault=0x7f0a0034;
        /**  If supported and enabled, are dreams activated when asleep and charging? (by default) 
         */
        public static final int config_dreamsActivatedOnSleepByDefault=0x7f0a0035;
        /**  If supported, are dreams enabled? (by default) 
         */
        public static final int config_dreamsEnabledByDefault=0x7f0a0033;
        /**  Is the dreams feature supported? 
         */
        public static final int config_dreamsSupported=0x7f0a0032;
        /**  If this value is true, duplicate Source/Destination port fields
         in WDP header of some carriers OMADM wap push are supported.
         ex: MSGTYPE-TotalSegments-CurrentSegment
             -SourcePortDestPort-SourcePortDestPort-OMADM PDU
         If false, not supported. 
         */
        public static final int config_duplicate_port_omadm_wappush=0x7f0a002d;
        /**  Don't show lock screen before unlock screen (PIN/pattern/password) 
         */
        public static final int config_enableLockBeforeUnlockScreen=0x7f0a0019;
        /**  Diable lockscreen rotation by default 
         */
        public static final int config_enableLockScreenRotation=0x7f0a001a;
        /**  If this is true, key chords can be used to take a screenshot on the device. 
         */
        public static final int config_enableScreenshotChord=0x7f0a000f;
        /**  True if WallpaperService is enabled 
         */
        public static final int config_enableWallpaperService=0x7f0a001e;
        /**  Whether WiFi display is supported by this device.
         There are many prerequisites for this feature to work correctly.
         Here are a few of them:
         * The WiFi radio must support WiFi P2P.
         * The WiFi radio must support concurrent connections to the WiFi display and
           to an access point.
         * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
           remote submix module.  This module is used to record and stream system
           audio output to the WiFi display encoder in the media server.
         * The remote submix module "audio.r_submix.default" must be installed on the device.
         * The device must be provisioned with HDCP keys (for protected content).
    
         */
        public static final int config_enableWifiDisplay=0x7f0a0038;
        /**  Enable emergency call when sim is locked or puk locked. Some countries/carriers do not
         allow emergency calls to be placed without the IMSI, which is locked in the SIM.
         If so, this should be set to 'false' in an overlay. 
         */
        public static final int config_enable_emergency_call_while_sim_locked=0x7f0a001c;
        /**  Enable puk unlockscreen by default.
         If unlock screen is disabled, the puk should be unlocked through Emergency Dialer 
         */
        public static final int config_enable_puk_unlock_screen=0x7f0a001b;
        /**  Is the notification LED intrusive? Used to decide if there should be a disable option 
         */
        public static final int config_intrusiveNotificationLed=0x7f0a0017;
        /**  Indicate whether closing the lid causes the device to go to sleep and opening
         it causes the device to wake up.
         The default is false. 
         */
        public static final int config_lidControlsSleep=0x7f0a0014;
        /**  If this value is true, The mms content-disposition field is supported correctly.
         If false, Content-disposition fragments are ignored 
         */
        public static final int config_mms_content_disposition_support=0x7f0a002b;
        /**  If true, the direction rotation is applied to get to an application's requested
         orientation is reversed.  Normally, the model is that landscape is
         clockwise from portrait; thus on a portrait device an app requesting
         landscape will cause a clockwise rotation, and on a landscape device an
         app requesting portrait will cause a counter-clockwise rotation.  Setting
         true here reverses that logic. 
         */
        public static final int config_reverseDefaultRotation=0x7f0a0011;
        /**  Whether safe headphone volume is enabled or not (country specific). 
         */
        public static final int config_safe_media_volume_enabled=0x7f0a003a;
        /**  Flag indicating whether the AUDIO_BECOMING_NOISY notification should
         be sent during a change to the audio output device. 
         */
        public static final int config_sendAudioBecomingNoisy=0x7f0a0005;
        /**  Flag indicating whether the surface flinger has limited
         alpha compositing functionality in hardware.  If set, the window
         manager will disable alpha trasformation in animations where not
         strictly needed. 
         */
        public static final int config_sf_limitedAlpha=0x7f0a0000;
        /**  Flag indicating whether the surface flinger is inefficient
         at performing a blur.  Used by parts of the UI to turn off
         the blur effect where it isn't worth the performance hit.
         As of Honeycomb, blurring is not supported anymore. 
         */
        public static final int config_sf_slowBlur=0x7f0a0002;
        /**  Sets whether menu shortcuts should be displayed on panel menus when
         a keyboard is present. 
         */
        public static final int config_showMenuShortcutsWhenKeyboardPresent=0x7f0a0028;
        /**  Whether a software navigation bar should be shown. NOTE: in the future this may be
         autodetected from the Configuration. 
         */
        public static final int config_showNavigationBar=0x7f0a002e;
        /**  Enables SIP on WIFI only 
         */
        public static final int config_sip_wifi_only=0x7f0a0025;
        /**  Flag indicating whether the current device allows sms service.
         If true, this means that the device supports both sending and
         receiving sms via the telephony network.
         This can be overridden to false for "data only" devices
         which can't send and receive sms message.

         Note: Disable SMS also disable voicemail waiting sms,
               cell broadcasting sms, and MMS. 
         */
        public static final int config_sms_capable=0x7f0a0023;
        /**  If this value is true, Sms encoded as octet is decoded by utf8 decoder.
         If false, decoded by Latin decoder. 
         */
        public static final int config_sms_utf8_support=0x7f0a002a;
        /**  Flag indicating if the speed up audio on mt call code should be executed 
         */
        public static final int config_speed_up_audio_on_mt_calls=0x7f0a003e;
        /**  Enables swipe versus poly-finger touch disambiguation in the KeyboardView 
         */
        public static final int config_swipeDisambiguation=0x7f0a001d;
        /**  The default value if the SyncStorageEngine should sync automatically or not 
         */
        public static final int config_syncstorageengine_masterSyncAutomatically=0x7f0a0037;
        /**  The VoiceMail default value is displayed to my own number if it is true 
         */
        public static final int config_telephony_use_own_number_for_voicemail=0x7f0a0029;
        /**  Enables or disables fading edges when marquee is enabled in TextView. 
         */
        public static final int config_ui_enableFadingMarquee=0x7f0a0006;
        /**  XXXXXX END OF RESOURCES USING WRONG NAMING CONVENTION 
 If this is true, the screen will come on when you unplug usb/power/whatever. 
         */
        public static final int config_unplugTurnsOnScreen=0x7f0a000d;
        /**  When true use the linux /dev/input/event subsystem to detect the switch changes
         on the headphone/microphone jack. When false use the older uevent framework. 
         */
        public static final int config_useDevInputEventForAudioJack=0x7f0a0039;
        /**  Flag indicating that the media framework should allow changing
         master volume stream and nothing else . 
         */
        public static final int config_useMasterVolume=0x7f0a0003;
        /**  Flag indicating that the media framework should support playing of sounds on volume
         key usage.  This adds noticeable additional overhead to volume key processing, so
         is disableable for products for which it is irrelevant. 
         */
        public static final int config_useVolumeKeySounds=0x7f0a0004;
        public static final int config_use_strict_phone_number_comparation=0x7f0a0016;
        /**  Flag indicating whether the current device is "voice capable".
         If true, this means that the device supports circuit-switched
         (i.e. voice) phone calls over the telephony network, and is
         allowed to display the in-call UI while a cellular voice call is
         active.  This can be overridden to false for "data only" devices
         which can't make voice calls and don't support any in-call UI.

         Note: this flag is subtly different from the
         PackageManager.FEATURE_TELEPHONY system feature, which is
         available on *any* device with a telephony radio, even if the
         device is data-only. 
         */
        public static final int config_voice_capable=0x7f0a0022;
        /**  Set to true if the wifi display supports compositing content stored
         in gralloc protected buffers.  For this to be true, there must exist
         a protected hardware path for surface flinger to composite and send
         protected buffers to the wifi display video encoder.

         If this flag is false, we advise applications not to use protected
         buffers (if possible) when presenting content to a wifi display because
         the content may be blanked.

         This flag controls whether the {@link Display#FLAG_SUPPORTS_PROTECTED_BUFFERS}
         flag is set for wifi displays.
    
         */
        public static final int config_wifiDisplaySupportsProtectedBuffers=0x7f0a003b;
        /**  Boolean indicating whether the wifi chipset supports background scanning mechanism.
         This mechanism allows the host to remain in suspend state and the dongle to actively
         scan and wake the host when a configured SSID is detected by the dongle. This chipset
         capability can provide power savings when wifi needs to be always kept on. 
         */
        public static final int config_wifi_background_scan_support=0x7f0a000a;
        /**  Boolean indicating whether the wifi chipset has dual frequency band support 
         */
        public static final int config_wifi_dual_band_support=0x7f0a0008;
        /**  Boolean indicating whether the wifi chipset has p2p support 
         */
        public static final int config_wifi_p2p_support=0x7f0a0009;
        /**  Set and Unsets WiMAX 
         */
        public static final int config_wimaxEnabled=0x7f0a0031;
        /**  Boolean indicating if restoring network selection should be skipped 
 The restoring is handled by modem if it is true
         */
        public static final int skip_restoring_network_selection=0x7f0a0027;
    }
    public static final class color {
        /**  Default color for notification LED. 
         */
        public static final int config_defaultNotificationColor=0x7f0f0000;
    }
    public static final class dimen {
        /**  Default screen margins, per the Android Design guidelines. 

         Customize dimensions originally defined in res/values/dimens.xml (such as
         screen margins) for sw720dp devices (e.g. 10" tablets) in landscape here.
    
         */
        public static final int activity_horizontal_margin=0x7f0d0004;
        public static final int activity_vertical_margin=0x7f0d0005;
        /**  Minimum span needed to begin a touch scaling gesture.
         If the span is equal to or greater than this size, a scaling gesture
         will begin, where supported. (See android.view.ScaleGestureDetector)

         This also takes into account the size of any active touch points.
         Devices with screens that deviate too far from their assigned density
         bucket should consider tuning this value in a device-specific overlay.
         For best results, care should be taken such that this value remains
         larger than the minimum reported touchMajor/touchMinor values
         reported by the hardware. 
         */
        public static final int config_minScalingSpan=0x7f0d0002;
        /**  Minimum accepted value for touchMajor while scaling. This may be tuned
         per-device in overlays. 
         */
        public static final int config_minScalingTouchMajor=0x7f0d0003;
        /**  The maximum width we would prefer dialogs to be.  0 if there is no
         maximum (let them grow as large as the screen).  Actual values are
         specified for -large and -xlarge configurations. 
         */
        public static final int config_prefDialogWidth=0x7f0d0000;
        /**  Base "touch slop" value used by ViewConfiguration as a
         movement threshold where scrolling should begin. 
         */
        public static final int config_viewConfigurationTouchSlop=0x7f0d0001;
        public static final int spot_progress_margin=0x7f0d0007;
        public static final int spot_progress_spot_size=0x7f0d0006;
        public static final int spot_progress_width=0x7f0d0008;
    }
    public static final class drawable {
        public static final int bg=0x7f020000;
        public static final int bg3=0x7f020001;
        public static final int borderstyle=0x7f020002;
        public static final int btn_bg=0x7f020003;
        public static final int btn_bg_click=0x7f020004;
        public static final int button_selector=0x7f020005;
        public static final int circle=0x7f020006;
        public static final int dialog_bg=0x7f020007;
        public static final int ic_launcher=0x7f020008;
        public static final int loading_01=0x7f020009;
        public static final int loading_02=0x7f02000a;
        public static final int loading_03=0x7f02000b;
        public static final int loading_04=0x7f02000c;
        public static final int loading_05=0x7f02000d;
        public static final int loading_06=0x7f02000e;
        public static final int loading_07=0x7f02000f;
        public static final int loading_08=0x7f020010;
        public static final int loading_09=0x7f020011;
        public static final int loading_10=0x7f020012;
        public static final int loading_11=0x7f020013;
        public static final int loading_12=0x7f020014;
        public static final int progress_circle_loading=0x7f020015;
        public static final int progress_circle_shape=0x7f020016;
        public static final int signal_new_1=0x7f020017;
        public static final int signal_new_2=0x7f020018;
        public static final int signal_new_3=0x7f020019;
        public static final int signal_new_4=0x7f02001a;
        public static final int signal_new_5=0x7f02001b;
        public static final int spot=0x7f02001c;
    }
    public static final class fraction {
        /**  Duration for the dim animation behind a dialog.  This may be either
         a percentage, which is relative to the duration of the enter/open
         animation of the window being shown that is dimming behind, or it may
         be an integer for a constant duration. 
         */
        public static final int config_dimBehindFadeDuration=0x7f0c0000;
    }
    public static final class id {
        public static final int action_settings=0x7f08002d;
        public static final int btn_add=0x7f080012;
        public static final int btn_broadcastchecktime=0x7f080022;
        public static final int btn_cancel=0x7f080003;
        public static final int btn_clearmeter=0x7f080021;
        public static final int btn_electricenergy=0x7f080028;
        public static final int btn_get_time=0x7f08001f;
        public static final int btn_lineloss=0x7f080027;
        public static final int btn_readdayfreeze=0x7f080023;
        public static final int btn_readhourfreeze=0x7f080024;
        public static final int btn_set_time=0x7f08001e;
        public static final int btn_setting=0x7f080029;
        public static final int btn_sure=0x7f080002;
        public static final int btn_test=0x7f080005;
        public static final int btn_topology=0x7f080026;
        public static final int button1=0x7f080010;
        public static final int button2=0x7f08002b;
        public static final int click=0x7f08000f;
        public static final int content=0x7f080025;
        public static final int dialog_view=0x7f080015;
        public static final int et_addr_settings=0x7f08001c;
        public static final int et_clearmeter=0x7f080020;
        public static final int et_time=0x7f08001d;
        public static final int img=0x7f080016;
        public static final int invisible=0x7f080001;
        public static final int line_main=0x7f080019;
        public static final int linear_add=0x7f080011;
        public static final int message=0x7f08002c;
        public static final int numberbar1=0x7f080006;
        public static final int numberbar2=0x7f080007;
        public static final int numberbar3=0x7f080008;
        public static final int numberbar4=0x7f080009;
        public static final int numberbar5=0x7f08000a;
        public static final int numberbar6=0x7f08000b;
        public static final int numberbar7=0x7f08000c;
        public static final int numberbar8=0x7f08000d;
        public static final int progress=0x7f08000e;
        public static final int progressBar1=0x7f080014;
        public static final int rbtn_blue_settings=0x7f08001a;
        public static final int rbtn_serial_settings=0x7f08001b;
        public static final int textView1=0x7f08002a;
        public static final int tipTextView=0x7f080017;
        public static final int tv_move=0x7f080018;
        public static final int tv_show=0x7f080004;
        public static final int tv_test1=0x7f080013;
        public static final int visible=0x7f080000;
    }
    public static final class integer {
        /**  Max number of downloads allowed to proceed concurrently 
         */
        public static final int config_MaxConcurrentDownloadsAllowed=0x7f0b0031;
        public static final int config_activityDefaultDur=0x7f0b0006;
        /**  The duration (in milliseconds) of the activity open/close and fragment open/close animations. 
         */
        public static final int config_activityShortDur=0x7f0b0005;
        /**  Control whether being in the car dock (and powered) always
         keeps the screen on.  By default it stays on when plugged in to
         AC.  0 will not keep it on; or together 1 to stay on when plugged
         in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.) 
         */
        public static final int config_carDockKeepsScreenOn=0x7f0b0013;
        /**  The number of degrees to rotate the display when the device is in a car dock.
         A value of -1 means no change in orientation by default. 
         */
        public static final int config_carDockRotation=0x7f0b0010;
        /**  Display low battery warning when battery level dips to this value.
         Also, the battery stats are flushed to disk when we hit this level.  
         */
        public static final int config_criticalBatteryWarningLevel=0x7f0b0017;
        /**  When a database query is executed, the results retuned are paginated
         in pages of size (in KB) indicated by this value 
         */
        public static final int config_cursorWindowSize=0x7f0b0033;
        /**  The default reduced-datarate notification mask 
 2 means give warning 
         */
        public static final int config_datause_notification_type=0x7f0b002c;
        /**  The default data-use polling period. 
         */
        public static final int config_datause_polling_period_sec=0x7f0b0029;
        /**  The default data-use threshold in bytes. 0 disables
         */
        public static final int config_datause_threshold_bytes=0x7f0b002a;
        /**  The default reduced-datarate value in kilobits per sec 
         */
        public static final int config_datause_throttle_kbitsps=0x7f0b002b;
        /**  Default LED off time for notification LED in milliseconds. 
         */
        public static final int config_defaultNotificationLedOff=0x7f0b001c;
        /**  Default LED on time for notification LED in milliseconds. 
         */
        public static final int config_defaultNotificationLedOn=0x7f0b001b;
        /**  Control the default UI mode type to use when there is no other type override
         happening.  One of the following values (See Configuration.java):
             1  UI_MODE_TYPE_NORMAL
             4  UI_MODE_TYPE_TELEVISION
             5  UI_MODE_TYPE_APPLIANCE
         Any other values will have surprising consequences. 
         */
        public static final int config_defaultUiModeType=0x7f0b0011;
        /**  Control whether being in the desk dock (and powered) always
         keeps the screen on.  By default it stays on when plugged in to
         AC.  0 will not keep it on; or together 1 to stay on when plugged
         in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.) 
         */
        public static final int config_deskDockKeepsScreenOn=0x7f0b0012;
        /**  The number of degrees to rotate the display when the device is in a desk dock.
         A value of -1 means no change in orientation by default. 
         */
        public static final int config_deskDockRotation=0x7f0b000f;
        /**  When the free space available in DownloadManager's data dir falls
         below the percentage value specified by this param, DownloadManager
         starts removing files to try to make percentage of available
         free space above this threshold value. 
         */
        public static final int config_downloadDataDirLowSpaceThreshold=0x7f0b0032;
        /**  Max space (in MB) allocated to DownloadManager to store the downloaded
         files if they are to be stored in DownloadManager's data dir,
         which typically is /data/data/com.android.providers.downloads/files 
         */
        public static final int config_downloadDataDirSize=0x7f0b0030;
        /**  Indicate whether the lid state impacts the accessibility of
         the physical keyboard.  0 means it doesn't, 1 means it is accessible
         when the lid is open, 2 means it is accessible when the lid is
         closed.  The default is 0. 
         */
        public static final int config_lidKeyboardAccessibility=0x7f0b0014;
        /**  Indicate whether the lid state impacts the accessibility of
         the navigation buttons.  0 means it doesn't, 1 means it is accessible
         when the lid is open, 2 means it is accessible when the lid is
         closed.  The default is 0. 
         */
        public static final int config_lidNavigationAccessibility=0x7f0b0015;
        /**  The number of degrees to rotate the display when the keyboard is open.
         A value of -1 means no change in orientation by default. 
         */
        public static final int config_lidOpenRotation=0x7f0b000e;
        /**  Amount of time it takes for the light sensor to warm up in milliseconds.
         For this time after the screen turns on, the Power Manager
         will not debounce light sensor readings 
         */
        public static final int config_lightSensorWarmupTime=0x7f0b0027;
        /**  The attenuation in dB applied to the lock/unlock sounds. 
         */
        public static final int config_lockSoundVolumeDb=0x7f0b0001;
        /**  The duration (in milliseconds) of a long animation. 
         */
        public static final int config_longAnimTime=0x7f0b0004;
        /**  Control the behavior when the user long presses the home button.
            0 - Nothing
            1 - Recent apps dialog
            2 - Recent apps view in SystemUI
         This needs to match the constants in
         policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
    
         */
        public static final int config_longPressOnHomeBehavior=0x7f0b0022;
        /**  Control the behavior when the user long presses the power button.
            0 - Nothing
            1 - Global actions menu
            2 - Power off (with confirmation)
    
         */
        public static final int config_longPressOnPowerBehavior=0x7f0b0016;
        /**  Close low battery warning when battery level reaches this value 
         */
        public static final int config_lowBatteryCloseWarningLevel=0x7f0b001a;
        /**  Display low battery warning when battery level dips to this value 
 Display low battery warning when battery level dips to this value 
         */
        public static final int config_lowBatteryWarningLevel=0x7f0b0019;
        /**  Maximum number of grid columns permitted in the ResolverActivity
         used for picking activities to handle an intent. 
         */
        public static final int config_maxResolverActivityColumns=0x7f0b0037;
        /**  Max number of Bluetooth tethering connections allowed. If this is
         updated config_tether_dhcp_range has to be updated appropriately. 
         */
        public static final int config_max_pan_devices=0x7f0b0009;
        /**  The duration (in milliseconds) of a medium-length animation. 
         */
        public static final int config_mediumAnimTime=0x7f0b0003;
        /**   Maximum number of supported users 
         */
        public static final int config_multiuserMaximumUsers=0x7f0b0038;
        /**  Default network policy warning threshold, in megabytes. 
         */
        public static final int config_networkPolicyDefaultWarning=0x7f0b0036;
        /**  The maximum duration (in milliseconds) we expect a network transition to take 
         */
        public static final int config_networkTransitionTimeout=0x7f0b0008;
        /**  Default value for led color when battery is fully charged 
         */
        public static final int config_notificationsBatteryFullARGB=0x7f0b001f;
        /**  Default value for LED off time when the battery is low on charge in miliseconds 
         */
        public static final int config_notificationsBatteryLedOff=0x7f0b0021;
        /**  Default value for LED on time when the battery is low on charge in miliseconds 
         */
        public static final int config_notificationsBatteryLedOn=0x7f0b0020;
        /**  Default value for led color when battery is low on charge 
         */
        public static final int config_notificationsBatteryLowARGB=0x7f0b001d;
        /**  Default value for led color when battery is medium charged 
         */
        public static final int config_notificationsBatteryMediumARGB=0x7f0b001e;
        /**  Timeout to wait for NTP server response. 
         */
        public static final int config_ntpTimeout=0x7f0b0035;
        /**  The duration (in milliseconds) that the radio will scan for a signal
         when there's no network connection. If the scan doesn't timeout, use zero 
         */
        public static final int config_radioScanningTimeout=0x7f0b0007;
        /**  Safe headphone volume index. When music stream volume is below this index
    the SPL on headphone output is compliant to EN 60950 requirements for portable music
    players. 
         */
        public static final int config_safe_media_volume_index=0x7f0b0039;
        /**  Screen brightness used to dim the screen when the user activity
         timeout expires.  May be less than the minimum allowed brightness setting
         that can be set by the user. 
         */
        public static final int config_screenBrightnessDim=0x7f0b0026;
        /**  Default screen brightness setting.
         Must be in the range specified by minimum and maximum. 
         */
        public static final int config_screenBrightnessSettingDefault=0x7f0b0025;
        /**  Maximum screen brightness allowed by the power manager.
         The user is forbidden from setting the brightness above this level. 
         */
        public static final int config_screenBrightnessSettingMaximum=0x7f0b0024;
        /**  Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. 
         */
        public static final int config_screenBrightnessSettingMinimum=0x7f0b0023;
        /**  The duration (in milliseconds) of a short animation. 
         */
        public static final int config_shortAnimTime=0x7f0b0002;
        /**  Shutdown if the battery temperature exceeds (this value * 0.1) Celsius. 
         */
        public static final int config_shutdownBatteryTemperature=0x7f0b0018;
        /**  The attenuation in dB applied to the sound effects played
         through AudioManager.playSoundEffect() when no volume is specified. 
         */
        public static final int config_soundEffectVolumeDb=0x7f0b0000;
        /**  Specifies the amount of time to disable virtual keys after the screen is touched
         in order to filter out accidental virtual key presses due to swiping gestures
         or taps near the edge of the display.  May be 0 to disable the feature.
         It is recommended that this value be no more than 250 ms.
         This feature should be disabled for most devices. 
         */
        public static final int config_virtualKeyQuietTimeMillis=0x7f0b0028;
        /**  Wifi driver stop delay, in milliseconds.
         Default value is 2 minutes. 
         */
        public static final int config_wifi_driver_stop_delay=0x7f0b000d;
        /**  Integer indicating the framework scan interval in milliseconds. This is used in the scenario
         where the chipset does not support background scanning (config_wifi_background_scan_suport
         is false) to set up a periodic wake up scan so that the device can connect to a new access
         point on the move. A value of 0 means no periodic scans will be used in the framework. 
         */
        public static final int config_wifi_framework_scan_interval=0x7f0b000c;
        /**  Integer indicating wpa_supplicant scan interval when p2p is connected in milliseconds 
         */
        public static final int config_wifi_scan_interval_p2p_connected=0x7f0b000b;
        /**  Integer indicating wpa_supplicant scan interval in milliseconds 
         */
        public static final int config_wifi_supplicant_scan_interval=0x7f0b000a;
        /**  Maximum number of database connections opened and managed by framework layer
         to handle queries on each database when using Write-Ahead Logging. 
         */
        public static final int db_connection_pool_size=0x7f0b002d;
        /**  Maximum size of the persistent journal file in bytes.
         If the journal file grows to be larger than this amount then SQLite will
         truncate it after committing the transaction. 
         */
        public static final int db_journal_size_limit=0x7f0b002e;
        /**  The Write-Ahead Log auto-checkpoint interval in database pages (typically 1 to 4KB).
         The log is checkpointed automatically whenever it exceeds this many pages.
         When a database is reopened, its journal mode is set back to the default
         journal mode, which may cause a checkpoint operation to occur.  Checkpoints
         can also happen at other times when transactions are committed.
         The bigger the WAL file, the longer a checkpoint operation takes, so we try
         to keep the WAL file relatively small to avoid long delays.
         The size of the WAL file is also constrained by 'db_journal_size_limit'. 
         */
        public static final int db_wal_autocheckpoint=0x7f0b002f;
        /**  Maximum numerical value that will be shown in a status bar
         notification icon or in the notification itself. Will be replaced
         with @string/status_bar_notification_info_overflow when shown in the
         UI. 
         */
        public static final int status_bar_notification_info_maxnum=0x7f0b0034;
    }
    public static final class interpolator {
        public static final int accelerate_cubic=0x7f060000;
        public static final int accelerate_decelerate=0x7f060001;
        public static final int accelerate_quad=0x7f060002;
        public static final int accelerate_quint=0x7f060003;
        public static final int anticipate=0x7f060004;
        public static final int anticipate_overshoot=0x7f060005;
        public static final int bounce=0x7f060006;
        public static final int cycle=0x7f060007;
        public static final int decelerate_cubic=0x7f060008;
        public static final int decelerate_quad=0x7f060009;
        public static final int decelerate_quint=0x7f06000a;
        public static final int linear=0x7f06000b;
        public static final int overshoot=0x7f06000c;
    }
    public static final class layout {
        public static final int activity_main=0x7f030000;
        public static final int activity_numberprogressbar=0x7f030001;
        public static final int activity_testxprogressbar=0x7f030002;
        public static final int desklayout=0x7f030003;
        public static final int dynamic=0x7f030004;
        public static final int list_content=0x7f030005;
        public static final int loading=0x7f030006;
        public static final int loading_dialog=0x7f030007;
        public static final int movable_textview=0x7f030008;
        public static final int settings_layout=0x7f030009;
        public static final int test=0x7f03000a;
        public static final int test_activity=0x7f03000b;
        public static final int test_fragment=0x7f03000c;
        public static final int view_xprogressdialog_circle_progress=0x7f03000d;
        public static final int view_xprogressdialog_heart_progress=0x7f03000e;
        public static final int view_xprogressdialog_spot=0x7f03000f;
    }
    public static final class menu {
        public static final int main=0x7f110000;
    }
    public static final class raw {
        public static final int alert=0x7f070000;
    }
    public static final class string {
        public static final int action_settings=0x7f0e0016;
        public static final int app_name=0x7f0e0015;
        public static final int check_time=0x7f0e005e;
        public static final int common_imei_code=0x7f0e0053;
        public static final int common_register=0x7f0e0056;
        public static final int common_register_cancel=0x7f0e0057;
        public static final int common_register_code=0x7f0e0054;
        public static final int common_register_input=0x7f0e0055;
        /**  The default iface on which to monitor data use 
         */
        public static final int config_datause_iface=0x7f0e0006;
        /**  IP address of the dns server to use if nobody else suggests one 
         */
        public static final int config_default_dns_server=0x7f0e0007;
        /**  ComponentName of the default dream (Settings.Secure.SCREENSAVER_COMPONENT) 
         */
        public static final int config_dreamsDefaultComponent=0x7f0e0014;
        /**  Regex of wired ethernet ifaces 
         */
        public static final int config_ethernet_iface_regex=0x7f0e0000;
        /**  Path to an ISO image to be shared with via USB mass storage.
         This is intended to allow packaging drivers or tools for installation on a PC. 
         */
        public static final int config_isoImagePath=0x7f0e000d;
        /**  Remote server that can provide NTP responses. 
         */
        public static final int config_ntpServer=0x7f0e000e;
        /**  String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
         */
        public static final int config_tether_apndata=0x7f0e0001;
        /**  The URL that should be sent in an x-wap-profile header with an HTTP request,
         as defined in the Open Mobile Alliance User Agent Profile specification
         OMA-TS-UAProf-V2_0-20060206-A Section 8.1.1.1. If the URL contains a '%s'
         format string then that substring will be replaced with the value of
         Build.MODEL. The format string shall not be escaped. 
         */
        public static final int config_useragentprofile_url=0x7f0e000c;
        /**  Device type information conforming to Annex B format in WiFi Direct specification.
         The default represents a dual-mode smartphone 
         */
        public static final int config_wifi_p2p_device_type=0x7f0e0002;
        /**  Name of the wimax manager class 
         */
        public static final int config_wimaxManagerClassname=0x7f0e0011;
        /**  Location of the wimax native library locaiton 
         */
        public static final int config_wimaxNativeLibLocation=0x7f0e0010;
        /**  Name of the wimax service class 
         */
        public static final int config_wimaxServiceClassname=0x7f0e0012;
        /**  Location of the wimax framwork jar location 
         */
        public static final int config_wimaxServiceJarLocation=0x7f0e000f;
        /**  Name of the wimax state tracker clas 
         */
        public static final int config_wimaxStateTrackerClassname=0x7f0e0013;
        /**  The default journal mode to use use when Write-Ahead Logging is not active.
         Choices are: OFF, DELETE, TRUNCATE, PERSIST and MEMORY.
         PERSIST may improve performance by reducing how often journal blocks are
         reallocated (compared to truncation) resulting in better data block locality
         and less churn of the storage media. 
         */
        public static final int db_default_journal_mode=0x7f0e0009;
        /**  The database synchronization mode when using the default journal mode.
         FULL is safest and preserves durability at the cost of extra fsyncs.
         NORMAL also preserves durability in non-WAL modes and uses checksums to ensure
         integrity although there is a small chance that an error might go unnoticed.
         Choices are: FULL, NORMAL, OFF. 
         */
        public static final int db_default_sync_mode=0x7f0e000a;
        /**  The database synchronization mode when using Write-Ahead Logging.
         FULL is safest and preserves durability at the cost of extra fsyncs.
         NORMAL sacrifices durability in WAL mode because syncs are only performed before
         and after checkpoint operations.  If checkpoints are infrequent and power loss
         occurs, then committed transactions could be lost and applications might break.
         Choices are: FULL, NORMAL, OFF. 
         */
        public static final int db_wal_sync_mode=0x7f0e000b;
        /**  Component name of the default wallpaper. This will be ImageWallpaper if not
         specified 
         */
        public static final int default_wallpaper_component=0x7f0e0005;
        public static final int finish=0x7f0e0018;
        public static final int get_time=0x7f0e005f;
        /**  The default character set for GsmAlphabet 
 Empty string means MBCS is not considered 
         */
        public static final int gsm_alphabet_default_charset=0x7f0e0008;
        public static final int hello_world=0x7f0e0017;
        public static final int read=0x7f0e0059;
        /**  mainnodemodule 
         */
        public static final int set=0x7f0e0058;
        public static final int start_report=0x7f0e005b;
        public static final int start_sleep=0x7f0e005d;
        public static final int stop_report=0x7f0e005c;
        public static final int str_activepower=0x7f0e001b;
        public static final int str_analyzeraddr=0x7f0e0046;
        public static final int str_analyzerinfo=0x7f0e0043;
        public static final int str_back=0x7f0e0037;
        public static final int str_backNoise=0x7f0e0061;
        public static final int str_branchbox=0x7f0e0045;
        public static final int str_branchlevel=0x7f0e0040;
        public static final int str_branchrecogresult=0x7f0e0041;
        public static final int str_broadcastchecktime=0x7f0e004b;
        public static final int str_calc=0x7f0e0035;
        public static final int str_channel_bluetooth=0x7f0e0051;
        public static final int str_channel_serialport=0x7f0e0052;
        public static final int str_cleardata=0x7f0e0064;
        public static final int str_clearmeter=0x7f0e004c;
        public static final int str_commuexport=0x7f0e0038;
        public static final int str_communication=0x7f0e0047;
        public static final int str_current=0x7f0e001a;
        public static final int str_dianbiao=0x7f0e0033;
        public static final int str_electricenergy=0x7f0e0028;
        public static final int str_export=0x7f0e003e;
        public static final int str_fenxiyi=0x7f0e0032;
        public static final int str_get_date=0x7f0e004f;
        public static final int str_get_time=0x7f0e004d;
        public static final int str_inspectingpower=0x7f0e001f;
        public static final int str_kaohebiao=0x7f0e0031;
        public static final int str_lineloss=0x7f0e0039;
        public static final int str_linelossvalue=0x7f0e003c;
        public static final int str_meteraddr=0x7f0e002c;
        public static final int str_meterboxnum=0x7f0e003f;
        public static final int str_new=0x7f0e003d;
        public static final int str_phase_A=0x7f0e0025;
        public static final int str_phase_B=0x7f0e0026;
        public static final int str_phase_C=0x7f0e0027;
        public static final int str_phaseangle=0x7f0e001d;
        public static final int str_pointread=0x7f0e0066;
        public static final int str_position=0x7f0e003b;
        public static final int str_positiveactive=0x7f0e002f;
        public static final int str_power=0x7f0e002b;
        public static final int str_powerfactor=0x7f0e001e;
        public static final int str_powernetfreq=0x7f0e0024;
        public static final int str_query=0x7f0e0036;
        public static final int str_reactivepower=0x7f0e001c;
        public static final int str_read=0x7f0e0034;
        public static final int str_readdayfreeze=0x7f0e0049;
        public static final int str_readdevice=0x7f0e002a;
        public static final int str_readevent=0x7f0e0065;
        public static final int str_readhourfreeze=0x7f0e004a;
        public static final int str_readoption=0x7f0e0029;
        public static final int str_readtime=0x7f0e002d;
        public static final int str_readtimeterm=0x7f0e002e;
        public static final int str_reverseactive=0x7f0e0030;
        public static final int str_set_date=0x7f0e0050;
        public static final int str_set_time=0x7f0e004e;
        public static final int str_shutdown=0x7f0e0063;
        public static final int str_signalEnergy=0x7f0e0060;
        public static final int str_start=0x7f0e0048;
        public static final int str_startUp=0x7f0e0062;
        public static final int str_taibianaddr=0x7f0e0044;
        public static final int str_timeterm=0x7f0e003a;
        public static final int str_totalactivepower=0x7f0e0021;
        public static final int str_totalpowerfactor=0x7f0e0023;
        public static final int str_totalreactivepower=0x7f0e0022;
        public static final int str_voltage=0x7f0e0019;
        public static final int str_wavedistortion=0x7f0e0020;
        public static final int str_yes=0x7f0e0042;
        public static final int unknown=0x7f0e005a;
        /**  Class name for default keyguard appwidget [DO NOT TRANSLATE] 
         */
        public static final int widget_default_class_name=0x7f0e0004;
        /**  Package name for default keyguard appwidget [DO NOT TRANSLATE] 
         */
        public static final int widget_default_package_name=0x7f0e0003;
    }
    public static final class style {
        /** 
        Base application theme, dependent on API level. This theme is replaced
        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.

    

            Theme customizations available in newer API levels can go in
            res/values-vXX/styles.xml, while customizations related to
            backward-compatibility can go here.

        

        Base application theme for API 11+. This theme completely replaces
        AppBaseTheme from res/values/styles.xml on API 11+ devices.
    
 API 11 theme customizations can go here. 

        Base application theme for API 14+. This theme completely replaces
        AppBaseTheme from BOTH res/values/styles.xml and
        res/values-v11/styles.xml on API 14+ devices.
    
 API 14 theme customizations can go here. 
         */
        public static final int AppBaseTheme=0x7f100000;
        /**  Application theme. 
 All customizations that are NOT specific to a particular API-level can go here. 
         */
        public static final int AppTheme=0x7f100001;
        /** 模糊
         */
        public static final int MyDialogStyle=0x7f100003;
        public static final int NumberProgressBar_Beauty_Red=0x7f100006;
        public static final int NumberProgressBar_Default=0x7f100004;
        public static final int NumberProgressBar_Funny_Orange=0x7f10000a;
        public static final int NumberProgressBar_Grace_Yellow=0x7f100009;
        public static final int NumberProgressBar_Passing_Green=0x7f100005;
        public static final int NumberProgressBar_Relax_Blue=0x7f100008;
        public static final int NumberProgressBar_Twinkle_Night=0x7f10000b;
        public static final int NumberProgressBar_Warning_Red=0x7f100007;
        /**  4chn words/dword button style 
         */
        public static final int dword_btn_style=0x7f10000c;
        /**  自定义loading dialog 
         */
        public static final int loading_dialog=0x7f100002;
    }
    public static final class styleable {
        /** Attributes that can be used with a HeartProgressView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #HeartProgressView_heartColor com.yu.surprise:heartColor}</code></td><td></td></tr>
           </table>
           @see #HeartProgressView_heartColor
         */
        public static final int[] HeartProgressView = {
            0x7f01000c
        };
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#heartColor}
          attribute's value can be found in the {@link #HeartProgressView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:heartColor
        */
        public static final int HeartProgressView_heartColor = 0;
        /** Attributes that can be used with a MyView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MyView_viewColor com.yu.surprise:viewColor}</code></td><td></td></tr>
           </table>
           @see #MyView_viewColor
         */
        public static final int[] MyView = {
            0x7f010000
        };
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#viewColor}
          attribute's value can be found in the {@link #MyView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:viewColor
        */
        public static final int MyView_viewColor = 0;
        /** Attributes that can be used with a NumberProgressBar.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_current com.yu.surprise:progress_current}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_max com.yu.surprise:progress_max}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_reached_bar_height com.yu.surprise:progress_reached_bar_height}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_reached_color com.yu.surprise:progress_reached_color}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_text_color com.yu.surprise:progress_text_color}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_text_offset com.yu.surprise:progress_text_offset}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_text_size com.yu.surprise:progress_text_size}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_text_visibility com.yu.surprise:progress_text_visibility}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_unreached_bar_height com.yu.surprise:progress_unreached_bar_height}</code></td><td></td></tr>
           <tr><td><code>{@link #NumberProgressBar_progress_unreached_color com.yu.surprise:progress_unreached_color}</code></td><td></td></tr>
           </table>
           @see #NumberProgressBar_progress_current
           @see #NumberProgressBar_progress_max
           @see #NumberProgressBar_progress_reached_bar_height
           @see #NumberProgressBar_progress_reached_color
           @see #NumberProgressBar_progress_text_color
           @see #NumberProgressBar_progress_text_offset
           @see #NumberProgressBar_progress_text_size
           @see #NumberProgressBar_progress_text_visibility
           @see #NumberProgressBar_progress_unreached_bar_height
           @see #NumberProgressBar_progress_unreached_color
         */
        public static final int[] NumberProgressBar = {
            0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004,
            0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008,
            0x7f010009, 0x7f01000a
        };
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_current}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_current
        */
        public static final int NumberProgressBar_progress_current = 0;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_max}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_max
        */
        public static final int NumberProgressBar_progress_max = 1;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_reached_bar_height}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_reached_bar_height
        */
        public static final int NumberProgressBar_progress_reached_bar_height = 4;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_reached_color}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_reached_color
        */
        public static final int NumberProgressBar_progress_reached_color = 3;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_text_color}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_text_color
        */
        public static final int NumberProgressBar_progress_text_color = 7;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_text_offset}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_text_offset
        */
        public static final int NumberProgressBar_progress_text_offset = 8;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_text_size}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_text_size
        */
        public static final int NumberProgressBar_progress_text_size = 6;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_text_visibility}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>visible</code></td><td>0</td><td></td></tr>
<tr><td><code>invisible</code></td><td>1</td><td></td></tr>
</table>
          @attr name android:progress_text_visibility
        */
        public static final int NumberProgressBar_progress_text_visibility = 9;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_unreached_bar_height}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_unreached_bar_height
        */
        public static final int NumberProgressBar_progress_unreached_bar_height = 5;
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#progress_unreached_color}
          attribute's value can be found in the {@link #NumberProgressBar} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:progress_unreached_color
        */
        public static final int NumberProgressBar_progress_unreached_color = 2;
        /** Attributes that can be used with a Themes.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Themes_numberProgressBarStyle com.yu.surprise:numberProgressBarStyle}</code></td><td></td></tr>
           </table>
           @see #Themes_numberProgressBarStyle
         */
        public static final int[] Themes = {
            0x7f01000b
        };
        /**
          <p>This symbol is the offset where the {@link com.yu.surprise.R.attr#numberProgressBarStyle}
          attribute's value can be found in the {@link #Themes} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:numberProgressBarStyle
        */
        public static final int Themes_numberProgressBarStyle = 0;
    };
}
